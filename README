##### WCSimAnalysis #####

Contains code for displaying, analysing, reconstructing, and classifying WC events.
Please see the github wiki for the complete description.

##### Input/Output #####

Input to code is WCSim ROOT classes, using WCSimRootGeom and WCSimRootEvent to build
instances of WCSimOutputTree.

##### Building the code #####

(1) Source the WCSim setup script e.g "setupWCSimUCL.sh" which sets up paths and ROOT

(2) Source the WCSimAnalysis setup script "setupWCSimAnalysis.sh"

(3) To build everything

make all
# (currently calls: rootcint, shared)
# does not force a make clean...

(4) To build in stages

# clean
make clean

# build root dependencies
make rootcint

# build shared library (lib/libWCSimAnalysis.so)
# (note: need to run make rootcint first)
make shared 

(5) To build the event display executable

make evDisp

###### Running the code #####

Running of the code except for the event display is done via ROOT macros which load
in the compiled libraries.

For examples look in the "example" directory
This directory also includes a sample WCSim .root file for testing

# electron + muon fit 
root -l -x -q wc_trackfitter_el_mu.C

# electron fit 
root -l -x -q wc_trackfitter_el.C

# muon fit 
root -l -x -q wc_trackfitter_mu.C

# pi-zero fit 
root -l -x -q wc_trackfitter_piZero.C

# cosmic fit 
root -l -x -q wc_trackfitter_cosmic.C

# run the PID
root -l -x -q wc_train_read_PID.C

##### Notes on the PID #####

There are 5 different types of event sets that need to be used within the PID...
- numu_ccqe
- numu_all (i.e. CCQE + CC non-QE + NC events in the correct proportions)
- nuel_ccqe
- nuel_all (i.e. CCQE + CC non-QE + NC events in the correct proportions)
- numu_nc events

The event sets used for training the two ANN's are...
elANNmu -> Signal: nuel_ccqe , Background: numu_ccqe
elANNnc -> Signal: nuel_ccqe , Background: numu_nc
We use ccqe events so that they are trained on the cleanest subset of events.

A preselection is applied to any events that go into the training or are used as samples for testing...
- nHits < 50
- recoE_el < 550
- recoE_mu < 550
- recoE_el > 4950
- recoE_mu > 4950
- vtxRho_el > 1100
- vtxZ_el > 50 from top
- vtxZ_el < 50 from bottom
- veto
- fracHitsDownstream < 0

i.e. some activity in the detector, the reco energy not railing, and a 1m fiducial volume cut for the electron fit,
and a cut to remove escaping events that the veto would identify, as well as addition cuts that act as checks that the events have run correctly.

You need ~20k events of each type to get the appropriate stats and ensure that the training converges.
A large proportion (~80%) of numu_nc events are removed by the cut, mainly due to their elFit and muFit reco energies being < 550Mev. 
This is a good thing, however, leads to some issues with having a lack of NC events to train the elANNnc on.